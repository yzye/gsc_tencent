// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spider/code/spider/gsc_qa/proto/gsc.proto

#ifndef PROTOBUF_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto__INCLUDED
#define PROTOBUF_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace dqa_gsc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
void protobuf_AssignDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
void protobuf_ShutdownFile_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();

class GscResponse;
class GscAuthor;
class GscFieldValue;

// ===================================================================

class GscResponse : public ::google::protobuf::Message {
 public:
  GscResponse();
  virtual ~GscResponse();
  
  GscResponse(const GscResponse& from);
  
  inline GscResponse& operator=(const GscResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GscResponse& default_instance();
  
  void Swap(GscResponse* other);
  
  // implements Message ----------------------------------------------
  
  GscResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GscResponse& from);
  void MergeFrom(const GscResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional .pb.dqa_gsc.GscAuthor author = 2;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 2;
  inline const ::pb::dqa_gsc::GscAuthor& author() const;
  inline ::pb::dqa_gsc::GscAuthor* mutable_author();
  
  // optional bytes dynasty = 3;
  inline bool has_dynasty() const;
  inline void clear_dynasty();
  static const int kDynastyFieldNumber = 3;
  inline const ::std::string& dynasty() const;
  inline void set_dynasty(const ::std::string& value);
  inline void set_dynasty(const char* value);
  inline void set_dynasty(const void* value, size_t size);
  inline ::std::string* mutable_dynasty();
  
  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  
  // optional bytes annotation = 5;
  inline bool has_annotation() const;
  inline void clear_annotation();
  static const int kAnnotationFieldNumber = 5;
  inline const ::std::string& annotation() const;
  inline void set_annotation(const ::std::string& value);
  inline void set_annotation(const char* value);
  inline void set_annotation(const void* value, size_t size);
  inline ::std::string* mutable_annotation();
  
  // optional bytes appreciation = 6;
  inline bool has_appreciation() const;
  inline void clear_appreciation();
  static const int kAppreciationFieldNumber = 6;
  inline const ::std::string& appreciation() const;
  inline void set_appreciation(const ::std::string& value);
  inline void set_appreciation(const char* value);
  inline void set_appreciation(const void* value, size_t size);
  inline ::std::string* mutable_appreciation();
  
  // optional bytes style = 7;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 7;
  inline const ::std::string& style() const;
  inline void set_style(const ::std::string& value);
  inline void set_style(const char* value);
  inline void set_style(const void* value, size_t size);
  inline ::std::string* mutable_style();
  
  // optional bytes pic_path = 8;
  inline bool has_pic_path() const;
  inline void clear_pic_path();
  static const int kPicPathFieldNumber = 8;
  inline const ::std::string& pic_path() const;
  inline void set_pic_path(const ::std::string& value);
  inline void set_pic_path(const char* value);
  inline void set_pic_path(const void* value, size_t size);
  inline ::std::string* mutable_pic_path();
  
  // optional uint32 complexity = 9 [default = 0];
  inline bool has_complexity() const;
  inline void clear_complexity();
  static const int kComplexityFieldNumber = 9;
  inline ::google::protobuf::uint32 complexity() const;
  inline void set_complexity(::google::protobuf::uint32 value);
  
  // optional float popularity = 10;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 10;
  inline float popularity() const;
  inline void set_popularity(float value);
  
  // repeated .pb.dqa_gsc.GscFieldValue match_info = 11;
  inline int match_info_size() const;
  inline void clear_match_info();
  static const int kMatchInfoFieldNumber = 11;
  inline const ::pb::dqa_gsc::GscFieldValue& match_info(int index) const;
  inline ::pb::dqa_gsc::GscFieldValue* mutable_match_info(int index);
  inline ::pb::dqa_gsc::GscFieldValue* add_match_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_gsc::GscFieldValue >&
      match_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_gsc::GscFieldValue >*
      mutable_match_info();
  
  // optional bytes feedback = 12;
  inline bool has_feedback() const;
  inline void clear_feedback();
  static const int kFeedbackFieldNumber = 12;
  inline const ::std::string& feedback() const;
  inline void set_feedback(const ::std::string& value);
  inline void set_feedback(const char* value);
  inline void set_feedback(const void* value, size_t size);
  inline ::std::string* mutable_feedback();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_gsc.GscResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::pb::dqa_gsc::GscAuthor* author_;
  ::std::string* dynasty_;
  static const ::std::string _default_dynasty_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  ::std::string* annotation_;
  static const ::std::string _default_annotation_;
  ::std::string* appreciation_;
  static const ::std::string _default_appreciation_;
  ::std::string* style_;
  static const ::std::string _default_style_;
  ::std::string* pic_path_;
  static const ::std::string _default_pic_path_;
  ::google::protobuf::uint32 complexity_;
  float popularity_;
  ::google::protobuf::RepeatedPtrField< ::pb::dqa_gsc::GscFieldValue > match_info_;
  ::std::string* feedback_;
  static const ::std::string _default_feedback_;
  friend void  protobuf_AddDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  friend void protobuf_AssignDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  friend void protobuf_ShutdownFile_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GscResponse* default_instance_;
};
// -------------------------------------------------------------------

class GscAuthor : public ::google::protobuf::Message {
 public:
  GscAuthor();
  virtual ~GscAuthor();
  
  GscAuthor(const GscAuthor& from);
  
  inline GscAuthor& operator=(const GscAuthor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GscAuthor& default_instance();
  
  void Swap(GscAuthor* other);
  
  // implements Message ----------------------------------------------
  
  GscAuthor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GscAuthor& from);
  void MergeFrom(const GscAuthor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional float authority = 2;
  inline bool has_authority() const;
  inline void clear_authority();
  static const int kAuthorityFieldNumber = 2;
  inline float authority() const;
  inline void set_authority(float value);
  
  // optional bytes cv_info = 3;
  inline bool has_cv_info() const;
  inline void clear_cv_info();
  static const int kCvInfoFieldNumber = 3;
  inline const ::std::string& cv_info() const;
  inline void set_cv_info(const ::std::string& value);
  inline void set_cv_info(const char* value);
  inline void set_cv_info(const void* value, size_t size);
  inline ::std::string* mutable_cv_info();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_gsc.GscAuthor)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  float authority_;
  ::std::string* cv_info_;
  static const ::std::string _default_cv_info_;
  friend void  protobuf_AddDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  friend void protobuf_AssignDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  friend void protobuf_ShutdownFile_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GscAuthor* default_instance_;
};
// -------------------------------------------------------------------

class GscFieldValue : public ::google::protobuf::Message {
 public:
  GscFieldValue();
  virtual ~GscFieldValue();
  
  GscFieldValue(const GscFieldValue& from);
  
  inline GscFieldValue& operator=(const GscFieldValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GscFieldValue& default_instance();
  
  void Swap(GscFieldValue* other);
  
  // implements Message ----------------------------------------------
  
  GscFieldValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GscFieldValue& from);
  void MergeFrom(const GscFieldValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes field = 1;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::std::string& field() const;
  inline void set_field(const ::std::string& value);
  inline void set_field(const char* value);
  inline void set_field(const void* value, size_t size);
  inline ::std::string* mutable_field();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_gsc.GscFieldValue)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* field_;
  static const ::std::string _default_field_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  friend void protobuf_AssignDesc_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  friend void protobuf_ShutdownFile_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GscFieldValue* default_instance_;
};
// ===================================================================


// ===================================================================

// GscResponse

// optional bytes title = 1;
inline bool GscResponse::has_title() const {
  return _has_bit(0);
}
inline void GscResponse::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GscResponse::title() const {
  return *title_;
}
inline void GscResponse::set_title(const ::std::string& value) {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void GscResponse::set_title(const char* value) {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void GscResponse::set_title(const void* value, size_t size) {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_title() {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional .pb.dqa_gsc.GscAuthor author = 2;
inline bool GscResponse::has_author() const {
  return _has_bit(1);
}
inline void GscResponse::clear_author() {
  if (author_ != NULL) author_->::pb::dqa_gsc::GscAuthor::Clear();
  _clear_bit(1);
}
inline const ::pb::dqa_gsc::GscAuthor& GscResponse::author() const {
  return author_ != NULL ? *author_ : *default_instance_->author_;
}
inline ::pb::dqa_gsc::GscAuthor* GscResponse::mutable_author() {
  _set_bit(1);
  if (author_ == NULL) author_ = new ::pb::dqa_gsc::GscAuthor;
  return author_;
}

// optional bytes dynasty = 3;
inline bool GscResponse::has_dynasty() const {
  return _has_bit(2);
}
inline void GscResponse::clear_dynasty() {
  if (dynasty_ != &_default_dynasty_) {
    dynasty_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& GscResponse::dynasty() const {
  return *dynasty_;
}
inline void GscResponse::set_dynasty(const ::std::string& value) {
  _set_bit(2);
  if (dynasty_ == &_default_dynasty_) {
    dynasty_ = new ::std::string;
  }
  dynasty_->assign(value);
}
inline void GscResponse::set_dynasty(const char* value) {
  _set_bit(2);
  if (dynasty_ == &_default_dynasty_) {
    dynasty_ = new ::std::string;
  }
  dynasty_->assign(value);
}
inline void GscResponse::set_dynasty(const void* value, size_t size) {
  _set_bit(2);
  if (dynasty_ == &_default_dynasty_) {
    dynasty_ = new ::std::string;
  }
  dynasty_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_dynasty() {
  _set_bit(2);
  if (dynasty_ == &_default_dynasty_) {
    dynasty_ = new ::std::string;
  }
  return dynasty_;
}

// optional bytes content = 4;
inline bool GscResponse::has_content() const {
  return _has_bit(3);
}
inline void GscResponse::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& GscResponse::content() const {
  return *content_;
}
inline void GscResponse::set_content(const ::std::string& value) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GscResponse::set_content(const char* value) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GscResponse::set_content(const void* value, size_t size) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_content() {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// optional bytes annotation = 5;
inline bool GscResponse::has_annotation() const {
  return _has_bit(4);
}
inline void GscResponse::clear_annotation() {
  if (annotation_ != &_default_annotation_) {
    annotation_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& GscResponse::annotation() const {
  return *annotation_;
}
inline void GscResponse::set_annotation(const ::std::string& value) {
  _set_bit(4);
  if (annotation_ == &_default_annotation_) {
    annotation_ = new ::std::string;
  }
  annotation_->assign(value);
}
inline void GscResponse::set_annotation(const char* value) {
  _set_bit(4);
  if (annotation_ == &_default_annotation_) {
    annotation_ = new ::std::string;
  }
  annotation_->assign(value);
}
inline void GscResponse::set_annotation(const void* value, size_t size) {
  _set_bit(4);
  if (annotation_ == &_default_annotation_) {
    annotation_ = new ::std::string;
  }
  annotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_annotation() {
  _set_bit(4);
  if (annotation_ == &_default_annotation_) {
    annotation_ = new ::std::string;
  }
  return annotation_;
}

// optional bytes appreciation = 6;
inline bool GscResponse::has_appreciation() const {
  return _has_bit(5);
}
inline void GscResponse::clear_appreciation() {
  if (appreciation_ != &_default_appreciation_) {
    appreciation_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& GscResponse::appreciation() const {
  return *appreciation_;
}
inline void GscResponse::set_appreciation(const ::std::string& value) {
  _set_bit(5);
  if (appreciation_ == &_default_appreciation_) {
    appreciation_ = new ::std::string;
  }
  appreciation_->assign(value);
}
inline void GscResponse::set_appreciation(const char* value) {
  _set_bit(5);
  if (appreciation_ == &_default_appreciation_) {
    appreciation_ = new ::std::string;
  }
  appreciation_->assign(value);
}
inline void GscResponse::set_appreciation(const void* value, size_t size) {
  _set_bit(5);
  if (appreciation_ == &_default_appreciation_) {
    appreciation_ = new ::std::string;
  }
  appreciation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_appreciation() {
  _set_bit(5);
  if (appreciation_ == &_default_appreciation_) {
    appreciation_ = new ::std::string;
  }
  return appreciation_;
}

// optional bytes style = 7;
inline bool GscResponse::has_style() const {
  return _has_bit(6);
}
inline void GscResponse::clear_style() {
  if (style_ != &_default_style_) {
    style_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& GscResponse::style() const {
  return *style_;
}
inline void GscResponse::set_style(const ::std::string& value) {
  _set_bit(6);
  if (style_ == &_default_style_) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void GscResponse::set_style(const char* value) {
  _set_bit(6);
  if (style_ == &_default_style_) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void GscResponse::set_style(const void* value, size_t size) {
  _set_bit(6);
  if (style_ == &_default_style_) {
    style_ = new ::std::string;
  }
  style_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_style() {
  _set_bit(6);
  if (style_ == &_default_style_) {
    style_ = new ::std::string;
  }
  return style_;
}

// optional bytes pic_path = 8;
inline bool GscResponse::has_pic_path() const {
  return _has_bit(7);
}
inline void GscResponse::clear_pic_path() {
  if (pic_path_ != &_default_pic_path_) {
    pic_path_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& GscResponse::pic_path() const {
  return *pic_path_;
}
inline void GscResponse::set_pic_path(const ::std::string& value) {
  _set_bit(7);
  if (pic_path_ == &_default_pic_path_) {
    pic_path_ = new ::std::string;
  }
  pic_path_->assign(value);
}
inline void GscResponse::set_pic_path(const char* value) {
  _set_bit(7);
  if (pic_path_ == &_default_pic_path_) {
    pic_path_ = new ::std::string;
  }
  pic_path_->assign(value);
}
inline void GscResponse::set_pic_path(const void* value, size_t size) {
  _set_bit(7);
  if (pic_path_ == &_default_pic_path_) {
    pic_path_ = new ::std::string;
  }
  pic_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_pic_path() {
  _set_bit(7);
  if (pic_path_ == &_default_pic_path_) {
    pic_path_ = new ::std::string;
  }
  return pic_path_;
}

// optional uint32 complexity = 9 [default = 0];
inline bool GscResponse::has_complexity() const {
  return _has_bit(8);
}
inline void GscResponse::clear_complexity() {
  complexity_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 GscResponse::complexity() const {
  return complexity_;
}
inline void GscResponse::set_complexity(::google::protobuf::uint32 value) {
  _set_bit(8);
  complexity_ = value;
}

// optional float popularity = 10;
inline bool GscResponse::has_popularity() const {
  return _has_bit(9);
}
inline void GscResponse::clear_popularity() {
  popularity_ = 0;
  _clear_bit(9);
}
inline float GscResponse::popularity() const {
  return popularity_;
}
inline void GscResponse::set_popularity(float value) {
  _set_bit(9);
  popularity_ = value;
}

// repeated .pb.dqa_gsc.GscFieldValue match_info = 11;
inline int GscResponse::match_info_size() const {
  return match_info_.size();
}
inline void GscResponse::clear_match_info() {
  match_info_.Clear();
}
inline const ::pb::dqa_gsc::GscFieldValue& GscResponse::match_info(int index) const {
  return match_info_.Get(index);
}
inline ::pb::dqa_gsc::GscFieldValue* GscResponse::mutable_match_info(int index) {
  return match_info_.Mutable(index);
}
inline ::pb::dqa_gsc::GscFieldValue* GscResponse::add_match_info() {
  return match_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_gsc::GscFieldValue >&
GscResponse::match_info() const {
  return match_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_gsc::GscFieldValue >*
GscResponse::mutable_match_info() {
  return &match_info_;
}

// optional bytes feedback = 12;
inline bool GscResponse::has_feedback() const {
  return _has_bit(11);
}
inline void GscResponse::clear_feedback() {
  if (feedback_ != &_default_feedback_) {
    feedback_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& GscResponse::feedback() const {
  return *feedback_;
}
inline void GscResponse::set_feedback(const ::std::string& value) {
  _set_bit(11);
  if (feedback_ == &_default_feedback_) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(value);
}
inline void GscResponse::set_feedback(const char* value) {
  _set_bit(11);
  if (feedback_ == &_default_feedback_) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(value);
}
inline void GscResponse::set_feedback(const void* value, size_t size) {
  _set_bit(11);
  if (feedback_ == &_default_feedback_) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscResponse::mutable_feedback() {
  _set_bit(11);
  if (feedback_ == &_default_feedback_) {
    feedback_ = new ::std::string;
  }
  return feedback_;
}

// -------------------------------------------------------------------

// GscAuthor

// optional bytes name = 1;
inline bool GscAuthor::has_name() const {
  return _has_bit(0);
}
inline void GscAuthor::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GscAuthor::name() const {
  return *name_;
}
inline void GscAuthor::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GscAuthor::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GscAuthor::set_name(const void* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscAuthor::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional float authority = 2;
inline bool GscAuthor::has_authority() const {
  return _has_bit(1);
}
inline void GscAuthor::clear_authority() {
  authority_ = 0;
  _clear_bit(1);
}
inline float GscAuthor::authority() const {
  return authority_;
}
inline void GscAuthor::set_authority(float value) {
  _set_bit(1);
  authority_ = value;
}

// optional bytes cv_info = 3;
inline bool GscAuthor::has_cv_info() const {
  return _has_bit(2);
}
inline void GscAuthor::clear_cv_info() {
  if (cv_info_ != &_default_cv_info_) {
    cv_info_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& GscAuthor::cv_info() const {
  return *cv_info_;
}
inline void GscAuthor::set_cv_info(const ::std::string& value) {
  _set_bit(2);
  if (cv_info_ == &_default_cv_info_) {
    cv_info_ = new ::std::string;
  }
  cv_info_->assign(value);
}
inline void GscAuthor::set_cv_info(const char* value) {
  _set_bit(2);
  if (cv_info_ == &_default_cv_info_) {
    cv_info_ = new ::std::string;
  }
  cv_info_->assign(value);
}
inline void GscAuthor::set_cv_info(const void* value, size_t size) {
  _set_bit(2);
  if (cv_info_ == &_default_cv_info_) {
    cv_info_ = new ::std::string;
  }
  cv_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscAuthor::mutable_cv_info() {
  _set_bit(2);
  if (cv_info_ == &_default_cv_info_) {
    cv_info_ = new ::std::string;
  }
  return cv_info_;
}

// -------------------------------------------------------------------

// GscFieldValue

// optional bytes field = 1;
inline bool GscFieldValue::has_field() const {
  return _has_bit(0);
}
inline void GscFieldValue::clear_field() {
  if (field_ != &_default_field_) {
    field_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GscFieldValue::field() const {
  return *field_;
}
inline void GscFieldValue::set_field(const ::std::string& value) {
  _set_bit(0);
  if (field_ == &_default_field_) {
    field_ = new ::std::string;
  }
  field_->assign(value);
}
inline void GscFieldValue::set_field(const char* value) {
  _set_bit(0);
  if (field_ == &_default_field_) {
    field_ = new ::std::string;
  }
  field_->assign(value);
}
inline void GscFieldValue::set_field(const void* value, size_t size) {
  _set_bit(0);
  if (field_ == &_default_field_) {
    field_ = new ::std::string;
  }
  field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscFieldValue::mutable_field() {
  _set_bit(0);
  if (field_ == &_default_field_) {
    field_ = new ::std::string;
  }
  return field_;
}

// optional bytes value = 2;
inline bool GscFieldValue::has_value() const {
  return _has_bit(1);
}
inline void GscFieldValue::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GscFieldValue::value() const {
  return *value_;
}
inline void GscFieldValue::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GscFieldValue::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GscFieldValue::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GscFieldValue::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dqa_gsc
}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spider_2fcode_2fspider_2fgsc_5fqa_2fproto_2fgsc_2eproto__INCLUDED
