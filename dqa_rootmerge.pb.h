// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spider/poem/dqa_rootmerge.proto

#ifndef PROTOBUF_spider_2fpoem_2fdqa_5frootmerge_2eproto__INCLUDED
#define PROTOBUF_spider_2fpoem_2fdqa_5frootmerge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace dqa_rootmerge {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();

class RootMergeRequest;
class RootMergeResponse;
class RootServerRequest;
class RootServerResponse;
class AnswerSourceMask;
class AnswerItem;
class MergeAnswerItem;
class Cgi2RootMerge;
class Busi2RootMerge;
class Cgi2RootServer;
class Busi2RootServer;
class RootServer2Cgi;
class RootMerge2Cgi;
class RootMergeSearchInfo;
class RootServerSearchInfo;
class SearchInfo;
class UserInfo;
class RootMergeQuestionInfo;
class RootServerAnsInfo4App;
class RootServerAnsInfo4Query;
class RootMergeResult;

enum RootQaBid {
  RQA_BID_XIAOYUEYUE = 1000001,
  RQA_BID_XIAOMEI = 1000002
};
bool RootQaBid_IsValid(int value);
const RootQaBid RootQaBid_MIN = RQA_BID_XIAOYUEYUE;
const RootQaBid RootQaBid_MAX = RQA_BID_XIAOMEI;
const int RootQaBid_ARRAYSIZE = RootQaBid_MAX + 1;

const ::google::protobuf::EnumDescriptor* RootQaBid_descriptor();
inline const ::std::string& RootQaBid_Name(RootQaBid value) {
  return ::google::protobuf::internal::NameOfEnum(
    RootQaBid_descriptor(), value);
}
inline bool RootQaBid_Parse(
    const ::std::string& name, RootQaBid* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RootQaBid>(
    RootQaBid_descriptor(), name, value);
}
enum DqaAnswerType {
  DQA_UNKNOW = 0,
  DQA_MUSIC = 1,
  DQA_VIDEO = 2,
  DQA_POETRY = 100,
  DQA_WEATHER = 200,
  DQA_FAQ = 300
};
bool DqaAnswerType_IsValid(int value);
const DqaAnswerType DqaAnswerType_MIN = DQA_UNKNOW;
const DqaAnswerType DqaAnswerType_MAX = DQA_FAQ;
const int DqaAnswerType_ARRAYSIZE = DqaAnswerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DqaAnswerType_descriptor();
inline const ::std::string& DqaAnswerType_Name(DqaAnswerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DqaAnswerType_descriptor(), value);
}
inline bool DqaAnswerType_Parse(
    const ::std::string& name, DqaAnswerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DqaAnswerType>(
    DqaAnswerType_descriptor(), name, value);
}
// ===================================================================

class RootMergeRequest : public ::google::protobuf::Message {
 public:
  RootMergeRequest();
  virtual ~RootMergeRequest();
  
  RootMergeRequest(const RootMergeRequest& from);
  
  inline RootMergeRequest& operator=(const RootMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootMergeRequest& default_instance();
  
  void Swap(RootMergeRequest* other);
  
  // implements Message ----------------------------------------------
  
  RootMergeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootMergeRequest& from);
  void MergeFrom(const RootMergeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes search_id = 1;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 1;
  inline const ::std::string& search_id() const;
  inline void set_search_id(const ::std::string& value);
  inline void set_search_id(const char* value);
  inline void set_search_id(const void* value, size_t size);
  inline ::std::string* mutable_search_id();
  
  // optional .pb.dqa_rootmerge.RootQaBid bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline pb::dqa_rootmerge::RootQaBid bid() const;
  inline void set_bid(pb::dqa_rootmerge::RootQaBid value);
  
  // required bytes question = 3;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 3;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const void* value, size_t size);
  inline ::std::string* mutable_question();
  
  // optional .pb.dqa_rootmerge.UserInfo user_info = 4;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  inline const ::pb::dqa_rootmerge::UserInfo& user_info() const;
  inline ::pb::dqa_rootmerge::UserInfo* mutable_user_info();
  
  // optional .pb.dqa_rootmerge.SearchInfo search_info = 5;
  inline bool has_search_info() const;
  inline void clear_search_info();
  static const int kSearchInfoFieldNumber = 5;
  inline const ::pb::dqa_rootmerge::SearchInfo& search_info() const;
  inline ::pb::dqa_rootmerge::SearchInfo* mutable_search_info();
  
  // optional uint32 seq_no = 6 [default = 0];
  inline bool has_seq_no() const;
  inline void clear_seq_no();
  static const int kSeqNoFieldNumber = 6;
  inline ::google::protobuf::uint32 seq_no() const;
  inline void set_seq_no(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootMergeRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* search_id_;
  static const ::std::string _default_search_id_;
  int bid_;
  ::std::string* question_;
  static const ::std::string _default_question_;
  ::pb::dqa_rootmerge::UserInfo* user_info_;
  ::pb::dqa_rootmerge::SearchInfo* search_info_;
  ::google::protobuf::uint32 seq_no_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootMergeRequest* default_instance_;
};
// -------------------------------------------------------------------

class RootMergeResponse : public ::google::protobuf::Message {
 public:
  RootMergeResponse();
  virtual ~RootMergeResponse();
  
  RootMergeResponse(const RootMergeResponse& from);
  
  inline RootMergeResponse& operator=(const RootMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootMergeResponse& default_instance();
  
  void Swap(RootMergeResponse* other);
  
  // implements Message ----------------------------------------------
  
  RootMergeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootMergeResponse& from);
  void MergeFrom(const RootMergeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);
  
  // optional .pb.dqa_rootmerge.RootQaBid bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline pb::dqa_rootmerge::RootQaBid bid() const;
  inline void set_bid(pb::dqa_rootmerge::RootQaBid value);
  
  // optional .pb.dqa_rootmerge.RootMergeResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::pb::dqa_rootmerge::RootMergeResult& result() const;
  inline ::pb::dqa_rootmerge::RootMergeResult* mutable_result();
  
  // optional bytes query_analysis = 4;
  inline bool has_query_analysis() const;
  inline void clear_query_analysis();
  static const int kQueryAnalysisFieldNumber = 4;
  inline const ::std::string& query_analysis() const;
  inline void set_query_analysis(const ::std::string& value);
  inline void set_query_analysis(const char* value);
  inline void set_query_analysis(const void* value, size_t size);
  inline ::std::string* mutable_query_analysis();
  
  // optional uint32 seq_no = 5 [default = 0];
  inline bool has_seq_no() const;
  inline void clear_seq_no();
  static const int kSeqNoFieldNumber = 5;
  inline ::google::protobuf::uint32 seq_no() const;
  inline void set_seq_no(::google::protobuf::uint32 value);
  
  // optional bytes debug_info = 100;
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 100;
  inline const ::std::string& debug_info() const;
  inline void set_debug_info(const ::std::string& value);
  inline void set_debug_info(const char* value);
  inline void set_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_debug_info();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootMergeResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 ret_code_;
  int bid_;
  ::pb::dqa_rootmerge::RootMergeResult* result_;
  ::std::string* query_analysis_;
  static const ::std::string _default_query_analysis_;
  ::google::protobuf::uint32 seq_no_;
  ::std::string* debug_info_;
  static const ::std::string _default_debug_info_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootMergeResponse* default_instance_;
};
// -------------------------------------------------------------------

class RootServerRequest : public ::google::protobuf::Message {
 public:
  RootServerRequest();
  virtual ~RootServerRequest();
  
  RootServerRequest(const RootServerRequest& from);
  
  inline RootServerRequest& operator=(const RootServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootServerRequest& default_instance();
  
  void Swap(RootServerRequest* other);
  
  // implements Message ----------------------------------------------
  
  RootServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootServerRequest& from);
  void MergeFrom(const RootServerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes search_id = 1;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 1;
  inline const ::std::string& search_id() const;
  inline void set_search_id(const ::std::string& value);
  inline void set_search_id(const char* value);
  inline void set_search_id(const void* value, size_t size);
  inline ::std::string* mutable_search_id();
  
  // optional .pb.dqa_rootmerge.RootQaBid bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline pb::dqa_rootmerge::RootQaBid bid() const;
  inline void set_bid(pb::dqa_rootmerge::RootQaBid value);
  
  // required bytes question = 3;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 3;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const void* value, size_t size);
  inline ::std::string* mutable_question();
  
  // optional .pb.dqa_rootmerge.UserInfo user_info = 4;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  inline const ::pb::dqa_rootmerge::UserInfo& user_info() const;
  inline ::pb::dqa_rootmerge::UserInfo* mutable_user_info();
  
  // optional .pb.dqa_rootmerge.RootServerSearchInfo search_info = 5;
  inline bool has_search_info() const;
  inline void clear_search_info();
  static const int kSearchInfoFieldNumber = 5;
  inline const ::pb::dqa_rootmerge::RootServerSearchInfo& search_info() const;
  inline ::pb::dqa_rootmerge::RootServerSearchInfo* mutable_search_info();
  
  // optional uint32 seq_no = 6 [default = 0];
  inline bool has_seq_no() const;
  inline void clear_seq_no();
  static const int kSeqNoFieldNumber = 6;
  inline ::google::protobuf::uint32 seq_no() const;
  inline void set_seq_no(::google::protobuf::uint32 value);
  
  // optional bytes query_analysis = 7;
  inline bool has_query_analysis() const;
  inline void clear_query_analysis();
  static const int kQueryAnalysisFieldNumber = 7;
  inline const ::std::string& query_analysis() const;
  inline void set_query_analysis(const ::std::string& value);
  inline void set_query_analysis(const char* value);
  inline void set_query_analysis(const void* value, size_t size);
  inline ::std::string* mutable_query_analysis();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootServerRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* search_id_;
  static const ::std::string _default_search_id_;
  int bid_;
  ::std::string* question_;
  static const ::std::string _default_question_;
  ::pb::dqa_rootmerge::UserInfo* user_info_;
  ::pb::dqa_rootmerge::RootServerSearchInfo* search_info_;
  ::google::protobuf::uint32 seq_no_;
  ::std::string* query_analysis_;
  static const ::std::string _default_query_analysis_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class RootServerResponse : public ::google::protobuf::Message {
 public:
  RootServerResponse();
  virtual ~RootServerResponse();
  
  RootServerResponse(const RootServerResponse& from);
  
  inline RootServerResponse& operator=(const RootServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootServerResponse& default_instance();
  
  void Swap(RootServerResponse* other);
  
  // implements Message ----------------------------------------------
  
  RootServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootServerResponse& from);
  void MergeFrom(const RootServerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);
  
  // optional .pb.dqa_rootmerge.RootQaBid bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline pb::dqa_rootmerge::RootQaBid bid() const;
  inline void set_bid(pb::dqa_rootmerge::RootQaBid value);
  
  // repeated .pb.dqa_rootmerge.AnswerItem result_list = 3;
  inline int result_list_size() const;
  inline void clear_result_list();
  static const int kResultListFieldNumber = 3;
  inline const ::pb::dqa_rootmerge::AnswerItem& result_list(int index) const;
  inline ::pb::dqa_rootmerge::AnswerItem* mutable_result_list(int index);
  inline ::pb::dqa_rootmerge::AnswerItem* add_result_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerItem >&
      result_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerItem >*
      mutable_result_list();
  
  // optional uint32 seq_no = 4 [default = 0];
  inline bool has_seq_no() const;
  inline void clear_seq_no();
  static const int kSeqNoFieldNumber = 4;
  inline ::google::protobuf::uint32 seq_no() const;
  inline void set_seq_no(::google::protobuf::uint32 value);
  
  // optional bytes debug_info = 100;
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 100;
  inline const ::std::string& debug_info() const;
  inline void set_debug_info(const ::std::string& value);
  inline void set_debug_info(const char* value);
  inline void set_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_debug_info();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootServerResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 ret_code_;
  int bid_;
  ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerItem > result_list_;
  ::google::protobuf::uint32 seq_no_;
  ::std::string* debug_info_;
  static const ::std::string _default_debug_info_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class AnswerSourceMask : public ::google::protobuf::Message {
 public:
  AnswerSourceMask();
  virtual ~AnswerSourceMask();
  
  AnswerSourceMask(const AnswerSourceMask& from);
  
  inline AnswerSourceMask& operator=(const AnswerSourceMask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnswerSourceMask& default_instance();
  
  void Swap(AnswerSourceMask* other);
  
  // implements Message ----------------------------------------------
  
  AnswerSourceMask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnswerSourceMask& from);
  void MergeFrom(const AnswerSourceMask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 question_idx = 1;
  inline bool has_question_idx() const;
  inline void clear_question_idx();
  static const int kQuestionIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 question_idx() const;
  inline void set_question_idx(::google::protobuf::uint32 value);
  
  // optional uint32 source_idx = 2;
  inline bool has_source_idx() const;
  inline void clear_source_idx();
  static const int kSourceIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 source_idx() const;
  inline void set_source_idx(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.AnswerSourceMask)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 question_idx_;
  ::google::protobuf::uint32 source_idx_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AnswerSourceMask* default_instance_;
};
// -------------------------------------------------------------------

class AnswerItem : public ::google::protobuf::Message {
 public:
  AnswerItem();
  virtual ~AnswerItem();
  
  AnswerItem(const AnswerItem& from);
  
  inline AnswerItem& operator=(const AnswerItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnswerItem& default_instance();
  
  void Swap(AnswerItem* other);
  
  // implements Message ----------------------------------------------
  
  AnswerItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnswerItem& from);
  void MergeFrom(const AnswerItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .pb.dqa_rootmerge.DqaAnswerType ans_type = 1;
  inline bool has_ans_type() const;
  inline void clear_ans_type();
  static const int kAnsTypeFieldNumber = 1;
  inline pb::dqa_rootmerge::DqaAnswerType ans_type() const;
  inline void set_ans_type(pb::dqa_rootmerge::DqaAnswerType value);
  
  // optional uint64 ans_id = 2;
  inline bool has_ans_id() const;
  inline void clear_ans_id();
  static const int kAnsIdFieldNumber = 2;
  inline ::google::protobuf::uint64 ans_id() const;
  inline void set_ans_id(::google::protobuf::uint64 value);
  
  // required bytes ans_text = 3;
  inline bool has_ans_text() const;
  inline void clear_ans_text();
  static const int kAnsTextFieldNumber = 3;
  inline const ::std::string& ans_text() const;
  inline void set_ans_text(const ::std::string& value);
  inline void set_ans_text(const char* value);
  inline void set_ans_text(const void* value, size_t size);
  inline ::std::string* mutable_ans_text();
  
  // optional float ans_weight = 4;
  inline bool has_ans_weight() const;
  inline void clear_ans_weight();
  static const int kAnsWeightFieldNumber = 4;
  inline float ans_weight() const;
  inline void set_ans_weight(float value);
  
  // repeated .pb.dqa_rootmerge.AnswerSourceMask ans_source_mask = 5;
  inline int ans_source_mask_size() const;
  inline void clear_ans_source_mask();
  static const int kAnsSourceMaskFieldNumber = 5;
  inline const ::pb::dqa_rootmerge::AnswerSourceMask& ans_source_mask(int index) const;
  inline ::pb::dqa_rootmerge::AnswerSourceMask* mutable_ans_source_mask(int index);
  inline ::pb::dqa_rootmerge::AnswerSourceMask* add_ans_source_mask();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerSourceMask >&
      ans_source_mask() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerSourceMask >*
      mutable_ans_source_mask();
  
  // optional bytes merge_info = 6;
  inline bool has_merge_info() const;
  inline void clear_merge_info();
  static const int kMergeInfoFieldNumber = 6;
  inline const ::std::string& merge_info() const;
  inline void set_merge_info(const ::std::string& value);
  inline void set_merge_info(const char* value);
  inline void set_merge_info(const void* value, size_t size);
  inline ::std::string* mutable_merge_info();
  
  // optional bytes debug_info = 7;
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  inline const ::std::string& debug_info() const;
  inline void set_debug_info(const ::std::string& value);
  inline void set_debug_info(const char* value);
  inline void set_debug_info(const void* value, size_t size);
  inline ::std::string* mutable_debug_info();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.AnswerItem)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int ans_type_;
  ::google::protobuf::uint64 ans_id_;
  ::std::string* ans_text_;
  static const ::std::string _default_ans_text_;
  float ans_weight_;
  ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerSourceMask > ans_source_mask_;
  ::std::string* merge_info_;
  static const ::std::string _default_merge_info_;
  ::std::string* debug_info_;
  static const ::std::string _default_debug_info_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AnswerItem* default_instance_;
};
// -------------------------------------------------------------------

class MergeAnswerItem : public ::google::protobuf::Message {
 public:
  MergeAnswerItem();
  virtual ~MergeAnswerItem();
  
  MergeAnswerItem(const MergeAnswerItem& from);
  
  inline MergeAnswerItem& operator=(const MergeAnswerItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeAnswerItem& default_instance();
  
  void Swap(MergeAnswerItem* other);
  
  // implements Message ----------------------------------------------
  
  MergeAnswerItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeAnswerItem& from);
  void MergeFrom(const MergeAnswerItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .pb.dqa_rootmerge.AnswerItem ans_item = 1;
  inline bool has_ans_item() const;
  inline void clear_ans_item();
  static const int kAnsItemFieldNumber = 1;
  inline const ::pb::dqa_rootmerge::AnswerItem& ans_item() const;
  inline ::pb::dqa_rootmerge::AnswerItem* mutable_ans_item();
  
  // optional bytes merge_info = 2;
  inline bool has_merge_info() const;
  inline void clear_merge_info();
  static const int kMergeInfoFieldNumber = 2;
  inline const ::std::string& merge_info() const;
  inline void set_merge_info(const ::std::string& value);
  inline void set_merge_info(const char* value);
  inline void set_merge_info(const void* value, size_t size);
  inline ::std::string* mutable_merge_info();
  
  // optional float ans_score = 3;
  inline bool has_ans_score() const;
  inline void clear_ans_score();
  static const int kAnsScoreFieldNumber = 3;
  inline float ans_score() const;
  inline void set_ans_score(float value);
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.MergeAnswerItem)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::pb::dqa_rootmerge::AnswerItem* ans_item_;
  ::std::string* merge_info_;
  static const ::std::string _default_merge_info_;
  float ans_score_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MergeAnswerItem* default_instance_;
};
// -------------------------------------------------------------------

class Cgi2RootMerge : public ::google::protobuf::Message {
 public:
  Cgi2RootMerge();
  virtual ~Cgi2RootMerge();
  
  Cgi2RootMerge(const Cgi2RootMerge& from);
  
  inline Cgi2RootMerge& operator=(const Cgi2RootMerge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cgi2RootMerge& default_instance();
  
  void Swap(Cgi2RootMerge* other);
  
  // implements Message ----------------------------------------------
  
  Cgi2RootMerge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cgi2RootMerge& from);
  void MergeFrom(const Cgi2RootMerge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 debug_flag = 1 [default = 0];
  inline bool has_debug_flag() const;
  inline void clear_debug_flag();
  static const int kDebugFlagFieldNumber = 1;
  inline ::google::protobuf::uint64 debug_flag() const;
  inline void set_debug_flag(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.Cgi2RootMerge)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 debug_flag_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Cgi2RootMerge* default_instance_;
};
// -------------------------------------------------------------------

class Busi2RootMerge : public ::google::protobuf::Message {
 public:
  Busi2RootMerge();
  virtual ~Busi2RootMerge();
  
  Busi2RootMerge(const Busi2RootMerge& from);
  
  inline Busi2RootMerge& operator=(const Busi2RootMerge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Busi2RootMerge& default_instance();
  
  void Swap(Busi2RootMerge* other);
  
  // implements Message ----------------------------------------------
  
  Busi2RootMerge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Busi2RootMerge& from);
  void MergeFrom(const Busi2RootMerge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.Busi2RootMerge)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Busi2RootMerge* default_instance_;
};
// -------------------------------------------------------------------

class Cgi2RootServer : public ::google::protobuf::Message {
 public:
  Cgi2RootServer();
  virtual ~Cgi2RootServer();
  
  Cgi2RootServer(const Cgi2RootServer& from);
  
  inline Cgi2RootServer& operator=(const Cgi2RootServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cgi2RootServer& default_instance();
  
  void Swap(Cgi2RootServer* other);
  
  // implements Message ----------------------------------------------
  
  Cgi2RootServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cgi2RootServer& from);
  void MergeFrom(const Cgi2RootServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 debug_flag = 1 [default = 0];
  inline bool has_debug_flag() const;
  inline void clear_debug_flag();
  static const int kDebugFlagFieldNumber = 1;
  inline ::google::protobuf::uint64 debug_flag() const;
  inline void set_debug_flag(::google::protobuf::uint64 value);
  
  // optional bool enable_cache = 2 [default = true];
  inline bool has_enable_cache() const;
  inline void clear_enable_cache();
  static const int kEnableCacheFieldNumber = 2;
  inline bool enable_cache() const;
  inline void set_enable_cache(bool value);
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.Cgi2RootServer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 debug_flag_;
  bool enable_cache_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Cgi2RootServer* default_instance_;
};
// -------------------------------------------------------------------

class Busi2RootServer : public ::google::protobuf::Message {
 public:
  Busi2RootServer();
  virtual ~Busi2RootServer();
  
  Busi2RootServer(const Busi2RootServer& from);
  
  inline Busi2RootServer& operator=(const Busi2RootServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Busi2RootServer& default_instance();
  
  void Swap(Busi2RootServer* other);
  
  // implements Message ----------------------------------------------
  
  Busi2RootServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Busi2RootServer& from);
  void MergeFrom(const Busi2RootServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.Busi2RootServer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Busi2RootServer* default_instance_;
};
// -------------------------------------------------------------------

class RootServer2Cgi : public ::google::protobuf::Message {
 public:
  RootServer2Cgi();
  virtual ~RootServer2Cgi();
  
  RootServer2Cgi(const RootServer2Cgi& from);
  
  inline RootServer2Cgi& operator=(const RootServer2Cgi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootServer2Cgi& default_instance();
  
  void Swap(RootServer2Cgi* other);
  
  // implements Message ----------------------------------------------
  
  RootServer2Cgi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootServer2Cgi& from);
  void MergeFrom(const RootServer2Cgi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootServer2Cgi)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootServer2Cgi* default_instance_;
};
// -------------------------------------------------------------------

class RootMerge2Cgi : public ::google::protobuf::Message {
 public:
  RootMerge2Cgi();
  virtual ~RootMerge2Cgi();
  
  RootMerge2Cgi(const RootMerge2Cgi& from);
  
  inline RootMerge2Cgi& operator=(const RootMerge2Cgi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootMerge2Cgi& default_instance();
  
  void Swap(RootMerge2Cgi* other);
  
  // implements Message ----------------------------------------------
  
  RootMerge2Cgi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootMerge2Cgi& from);
  void MergeFrom(const RootMerge2Cgi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootMerge2Cgi)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootMerge2Cgi* default_instance_;
};
// -------------------------------------------------------------------

class RootMergeSearchInfo : public ::google::protobuf::Message {
 public:
  RootMergeSearchInfo();
  virtual ~RootMergeSearchInfo();
  
  RootMergeSearchInfo(const RootMergeSearchInfo& from);
  
  inline RootMergeSearchInfo& operator=(const RootMergeSearchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootMergeSearchInfo& default_instance();
  
  void Swap(RootMergeSearchInfo* other);
  
  // implements Message ----------------------------------------------
  
  RootMergeSearchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootMergeSearchInfo& from);
  void MergeFrom(const RootMergeSearchInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .pb.dqa_rootmerge.Cgi2RootMerge cgi_2_rootmerge = 1;
  inline bool has_cgi_2_rootmerge() const;
  inline void clear_cgi_2_rootmerge();
  static const int kCgi2RootmergeFieldNumber = 1;
  inline const ::pb::dqa_rootmerge::Cgi2RootMerge& cgi_2_rootmerge() const;
  inline ::pb::dqa_rootmerge::Cgi2RootMerge* mutable_cgi_2_rootmerge();
  
  // optional .pb.dqa_rootmerge.Busi2RootMerge busi_2_rootmerge = 2;
  inline bool has_busi_2_rootmerge() const;
  inline void clear_busi_2_rootmerge();
  static const int kBusi2RootmergeFieldNumber = 2;
  inline const ::pb::dqa_rootmerge::Busi2RootMerge& busi_2_rootmerge() const;
  inline ::pb::dqa_rootmerge::Busi2RootMerge* mutable_busi_2_rootmerge();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootMergeSearchInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::pb::dqa_rootmerge::Cgi2RootMerge* cgi_2_rootmerge_;
  ::pb::dqa_rootmerge::Busi2RootMerge* busi_2_rootmerge_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootMergeSearchInfo* default_instance_;
};
// -------------------------------------------------------------------

class RootServerSearchInfo : public ::google::protobuf::Message {
 public:
  RootServerSearchInfo();
  virtual ~RootServerSearchInfo();
  
  RootServerSearchInfo(const RootServerSearchInfo& from);
  
  inline RootServerSearchInfo& operator=(const RootServerSearchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootServerSearchInfo& default_instance();
  
  void Swap(RootServerSearchInfo* other);
  
  // implements Message ----------------------------------------------
  
  RootServerSearchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootServerSearchInfo& from);
  void MergeFrom(const RootServerSearchInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .pb.dqa_rootmerge.Cgi2RootServer cgi_2_rootserver = 1;
  inline bool has_cgi_2_rootserver() const;
  inline void clear_cgi_2_rootserver();
  static const int kCgi2RootserverFieldNumber = 1;
  inline const ::pb::dqa_rootmerge::Cgi2RootServer& cgi_2_rootserver() const;
  inline ::pb::dqa_rootmerge::Cgi2RootServer* mutable_cgi_2_rootserver();
  
  // optional .pb.dqa_rootmerge.Busi2RootServer busi_2_rootserver = 2;
  inline bool has_busi_2_rootserver() const;
  inline void clear_busi_2_rootserver();
  static const int kBusi2RootserverFieldNumber = 2;
  inline const ::pb::dqa_rootmerge::Busi2RootServer& busi_2_rootserver() const;
  inline ::pb::dqa_rootmerge::Busi2RootServer* mutable_busi_2_rootserver();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootServerSearchInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::pb::dqa_rootmerge::Cgi2RootServer* cgi_2_rootserver_;
  ::pb::dqa_rootmerge::Busi2RootServer* busi_2_rootserver_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootServerSearchInfo* default_instance_;
};
// -------------------------------------------------------------------

class SearchInfo : public ::google::protobuf::Message {
 public:
  SearchInfo();
  virtual ~SearchInfo();
  
  SearchInfo(const SearchInfo& from);
  
  inline SearchInfo& operator=(const SearchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchInfo& default_instance();
  
  void Swap(SearchInfo* other);
  
  // implements Message ----------------------------------------------
  
  SearchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchInfo& from);
  void MergeFrom(const SearchInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .pb.dqa_rootmerge.RootMergeSearchInfo rootmerge_search_info = 1;
  inline bool has_rootmerge_search_info() const;
  inline void clear_rootmerge_search_info();
  static const int kRootmergeSearchInfoFieldNumber = 1;
  inline const ::pb::dqa_rootmerge::RootMergeSearchInfo& rootmerge_search_info() const;
  inline ::pb::dqa_rootmerge::RootMergeSearchInfo* mutable_rootmerge_search_info();
  
  // optional .pb.dqa_rootmerge.RootServerSearchInfo rootserver_search_info = 2;
  inline bool has_rootserver_search_info() const;
  inline void clear_rootserver_search_info();
  static const int kRootserverSearchInfoFieldNumber = 2;
  inline const ::pb::dqa_rootmerge::RootServerSearchInfo& rootserver_search_info() const;
  inline ::pb::dqa_rootmerge::RootServerSearchInfo* mutable_rootserver_search_info();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.SearchInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::pb::dqa_rootmerge::RootMergeSearchInfo* rootmerge_search_info_;
  ::pb::dqa_rootmerge::RootServerSearchInfo* rootserver_search_info_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();
  
  UserInfo(const UserInfo& from);
  
  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();
  
  void Swap(UserInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);
  
  // optional float longtitude = 2 [default = 0];
  inline bool has_longtitude() const;
  inline void clear_longtitude();
  static const int kLongtitudeFieldNumber = 2;
  inline float longtitude() const;
  inline void set_longtitude(float value);
  
  // optional float latitude = 3 [default = 0];
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline float latitude() const;
  inline void set_latitude(float value);
  
  // optional bytes city = 4;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 4;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  
  // optional uint32 ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.UserInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 uid_;
  float longtitude_;
  float latitude_;
  ::std::string* city_;
  static const ::std::string _default_city_;
  ::google::protobuf::uint32 ip_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class RootMergeQuestionInfo : public ::google::protobuf::Message {
 public:
  RootMergeQuestionInfo();
  virtual ~RootMergeQuestionInfo();
  
  RootMergeQuestionInfo(const RootMergeQuestionInfo& from);
  
  inline RootMergeQuestionInfo& operator=(const RootMergeQuestionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootMergeQuestionInfo& default_instance();
  
  void Swap(RootMergeQuestionInfo* other);
  
  // implements Message ----------------------------------------------
  
  RootMergeQuestionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootMergeQuestionInfo& from);
  void MergeFrom(const RootMergeQuestionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes question = 1;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 1;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const void* value, size_t size);
  inline ::std::string* mutable_question();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootMergeQuestionInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* question_;
  static const ::std::string _default_question_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootMergeQuestionInfo* default_instance_;
};
// -------------------------------------------------------------------

class RootServerAnsInfo4App : public ::google::protobuf::Message {
 public:
  RootServerAnsInfo4App();
  virtual ~RootServerAnsInfo4App();
  
  RootServerAnsInfo4App(const RootServerAnsInfo4App& from);
  
  inline RootServerAnsInfo4App& operator=(const RootServerAnsInfo4App& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootServerAnsInfo4App& default_instance();
  
  void Swap(RootServerAnsInfo4App* other);
  
  // implements Message ----------------------------------------------
  
  RootServerAnsInfo4App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootServerAnsInfo4App& from);
  void MergeFrom(const RootServerAnsInfo4App& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .pb.dqa_rootmerge.DqaAnswerType app_type = 1;
  inline bool has_app_type() const;
  inline void clear_app_type();
  static const int kAppTypeFieldNumber = 1;
  inline pb::dqa_rootmerge::DqaAnswerType app_type() const;
  inline void set_app_type(pb::dqa_rootmerge::DqaAnswerType value);
  
  // repeated .pb.dqa_rootmerge.MergeAnswerItem ans_list = 2;
  inline int ans_list_size() const;
  inline void clear_ans_list();
  static const int kAnsListFieldNumber = 2;
  inline const ::pb::dqa_rootmerge::MergeAnswerItem& ans_list(int index) const;
  inline ::pb::dqa_rootmerge::MergeAnswerItem* mutable_ans_list(int index);
  inline ::pb::dqa_rootmerge::MergeAnswerItem* add_ans_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::MergeAnswerItem >&
      ans_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::MergeAnswerItem >*
      mutable_ans_list();
  
  // optional uint32 ans_num = 3;
  inline bool has_ans_num() const;
  inline void clear_ans_num();
  static const int kAnsNumFieldNumber = 3;
  inline ::google::protobuf::uint32 ans_num() const;
  inline void set_ans_num(::google::protobuf::uint32 value);
  
  // optional .pb.dqa_rootmerge.RootServer2Cgi rootserver_2_cgi = 4;
  inline bool has_rootserver_2_cgi() const;
  inline void clear_rootserver_2_cgi();
  static const int kRootserver2CgiFieldNumber = 4;
  inline const ::pb::dqa_rootmerge::RootServer2Cgi& rootserver_2_cgi() const;
  inline ::pb::dqa_rootmerge::RootServer2Cgi* mutable_rootserver_2_cgi();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootServerAnsInfo4App)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int app_type_;
  ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::MergeAnswerItem > ans_list_;
  ::google::protobuf::uint32 ans_num_;
  ::pb::dqa_rootmerge::RootServer2Cgi* rootserver_2_cgi_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootServerAnsInfo4App* default_instance_;
};
// -------------------------------------------------------------------

class RootServerAnsInfo4Query : public ::google::protobuf::Message {
 public:
  RootServerAnsInfo4Query();
  virtual ~RootServerAnsInfo4Query();
  
  RootServerAnsInfo4Query(const RootServerAnsInfo4Query& from);
  
  inline RootServerAnsInfo4Query& operator=(const RootServerAnsInfo4Query& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootServerAnsInfo4Query& default_instance();
  
  void Swap(RootServerAnsInfo4Query* other);
  
  // implements Message ----------------------------------------------
  
  RootServerAnsInfo4Query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootServerAnsInfo4Query& from);
  void MergeFrom(const RootServerAnsInfo4Query& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .pb.dqa_rootmerge.RootServerAnsInfo4App app_ans_list = 1;
  inline int app_ans_list_size() const;
  inline void clear_app_ans_list();
  static const int kAppAnsListFieldNumber = 1;
  inline const ::pb::dqa_rootmerge::RootServerAnsInfo4App& app_ans_list(int index) const;
  inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* mutable_app_ans_list(int index);
  inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* add_app_ans_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >&
      app_ans_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >*
      mutable_app_ans_list();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootServerAnsInfo4Query)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App > app_ans_list_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootServerAnsInfo4Query* default_instance_;
};
// -------------------------------------------------------------------

class RootMergeResult : public ::google::protobuf::Message {
 public:
  RootMergeResult();
  virtual ~RootMergeResult();
  
  RootMergeResult(const RootMergeResult& from);
  
  inline RootMergeResult& operator=(const RootMergeResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RootMergeResult& default_instance();
  
  void Swap(RootMergeResult* other);
  
  // implements Message ----------------------------------------------
  
  RootMergeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RootMergeResult& from);
  void MergeFrom(const RootMergeResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .pb.dqa_rootmerge.RootServerAnsInfo4App ans_list = 1;
  inline int ans_list_size() const;
  inline void clear_ans_list();
  static const int kAnsListFieldNumber = 1;
  inline const ::pb::dqa_rootmerge::RootServerAnsInfo4App& ans_list(int index) const;
  inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* mutable_ans_list(int index);
  inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* add_ans_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >&
      ans_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >*
      mutable_ans_list();
  
  // optional .pb.dqa_rootmerge.RootMerge2Cgi rootmerge_2_cgi = 2;
  inline bool has_rootmerge_2_cgi() const;
  inline void clear_rootmerge_2_cgi();
  static const int kRootmerge2CgiFieldNumber = 2;
  inline const ::pb::dqa_rootmerge::RootMerge2Cgi& rootmerge_2_cgi() const;
  inline ::pb::dqa_rootmerge::RootMerge2Cgi* mutable_rootmerge_2_cgi();
  
  // optional .pb.dqa_rootmerge.DqaAnswerType top1_app_type = 3;
  inline bool has_top1_app_type() const;
  inline void clear_top1_app_type();
  static const int kTop1AppTypeFieldNumber = 3;
  inline pb::dqa_rootmerge::DqaAnswerType top1_app_type() const;
  inline void set_top1_app_type(pb::dqa_rootmerge::DqaAnswerType value);
  
  // repeated .pb.dqa_rootmerge.DqaAnswerType app_type_list = 4;
  inline int app_type_list_size() const;
  inline void clear_app_type_list();
  static const int kAppTypeListFieldNumber = 4;
  inline pb::dqa_rootmerge::DqaAnswerType app_type_list(int index) const;
  inline void set_app_type_list(int index, pb::dqa_rootmerge::DqaAnswerType value);
  inline void add_app_type_list(pb::dqa_rootmerge::DqaAnswerType value);
  inline const ::google::protobuf::RepeatedField<int>& app_type_list() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_app_type_list();
  
  // @@protoc_insertion_point(class_scope:pb.dqa_rootmerge.RootMergeResult)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App > ans_list_;
  ::pb::dqa_rootmerge::RootMerge2Cgi* rootmerge_2_cgi_;
  int top1_app_type_;
  ::google::protobuf::RepeatedField<int> app_type_list_;
  friend void  protobuf_AddDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_AssignDesc_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  friend void protobuf_ShutdownFile_spider_2fpoem_2fdqa_5frootmerge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RootMergeResult* default_instance_;
};
// ===================================================================


// ===================================================================

// RootMergeRequest

// optional bytes search_id = 1;
inline bool RootMergeRequest::has_search_id() const {
  return _has_bit(0);
}
inline void RootMergeRequest::clear_search_id() {
  if (search_id_ != &_default_search_id_) {
    search_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RootMergeRequest::search_id() const {
  return *search_id_;
}
inline void RootMergeRequest::set_search_id(const ::std::string& value) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(value);
}
inline void RootMergeRequest::set_search_id(const char* value) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(value);
}
inline void RootMergeRequest::set_search_id(const void* value, size_t size) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootMergeRequest::mutable_search_id() {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  return search_id_;
}

// optional .pb.dqa_rootmerge.RootQaBid bid = 2;
inline bool RootMergeRequest::has_bid() const {
  return _has_bit(1);
}
inline void RootMergeRequest::clear_bid() {
  bid_ = 1000001;
  _clear_bit(1);
}
inline pb::dqa_rootmerge::RootQaBid RootMergeRequest::bid() const {
  return static_cast< pb::dqa_rootmerge::RootQaBid >(bid_);
}
inline void RootMergeRequest::set_bid(pb::dqa_rootmerge::RootQaBid value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::RootQaBid_IsValid(value));
  _set_bit(1);
  bid_ = value;
}

// required bytes question = 3;
inline bool RootMergeRequest::has_question() const {
  return _has_bit(2);
}
inline void RootMergeRequest::clear_question() {
  if (question_ != &_default_question_) {
    question_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RootMergeRequest::question() const {
  return *question_;
}
inline void RootMergeRequest::set_question(const ::std::string& value) {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void RootMergeRequest::set_question(const char* value) {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void RootMergeRequest::set_question(const void* value, size_t size) {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootMergeRequest::mutable_question() {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  return question_;
}

// optional .pb.dqa_rootmerge.UserInfo user_info = 4;
inline bool RootMergeRequest::has_user_info() const {
  return _has_bit(3);
}
inline void RootMergeRequest::clear_user_info() {
  if (user_info_ != NULL) user_info_->::pb::dqa_rootmerge::UserInfo::Clear();
  _clear_bit(3);
}
inline const ::pb::dqa_rootmerge::UserInfo& RootMergeRequest::user_info() const {
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::pb::dqa_rootmerge::UserInfo* RootMergeRequest::mutable_user_info() {
  _set_bit(3);
  if (user_info_ == NULL) user_info_ = new ::pb::dqa_rootmerge::UserInfo;
  return user_info_;
}

// optional .pb.dqa_rootmerge.SearchInfo search_info = 5;
inline bool RootMergeRequest::has_search_info() const {
  return _has_bit(4);
}
inline void RootMergeRequest::clear_search_info() {
  if (search_info_ != NULL) search_info_->::pb::dqa_rootmerge::SearchInfo::Clear();
  _clear_bit(4);
}
inline const ::pb::dqa_rootmerge::SearchInfo& RootMergeRequest::search_info() const {
  return search_info_ != NULL ? *search_info_ : *default_instance_->search_info_;
}
inline ::pb::dqa_rootmerge::SearchInfo* RootMergeRequest::mutable_search_info() {
  _set_bit(4);
  if (search_info_ == NULL) search_info_ = new ::pb::dqa_rootmerge::SearchInfo;
  return search_info_;
}

// optional uint32 seq_no = 6 [default = 0];
inline bool RootMergeRequest::has_seq_no() const {
  return _has_bit(5);
}
inline void RootMergeRequest::clear_seq_no() {
  seq_no_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 RootMergeRequest::seq_no() const {
  return seq_no_;
}
inline void RootMergeRequest::set_seq_no(::google::protobuf::uint32 value) {
  _set_bit(5);
  seq_no_ = value;
}

// -------------------------------------------------------------------

// RootMergeResponse

// optional int32 ret_code = 1;
inline bool RootMergeResponse::has_ret_code() const {
  return _has_bit(0);
}
inline void RootMergeResponse::clear_ret_code() {
  ret_code_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RootMergeResponse::ret_code() const {
  return ret_code_;
}
inline void RootMergeResponse::set_ret_code(::google::protobuf::int32 value) {
  _set_bit(0);
  ret_code_ = value;
}

// optional .pb.dqa_rootmerge.RootQaBid bid = 2;
inline bool RootMergeResponse::has_bid() const {
  return _has_bit(1);
}
inline void RootMergeResponse::clear_bid() {
  bid_ = 1000001;
  _clear_bit(1);
}
inline pb::dqa_rootmerge::RootQaBid RootMergeResponse::bid() const {
  return static_cast< pb::dqa_rootmerge::RootQaBid >(bid_);
}
inline void RootMergeResponse::set_bid(pb::dqa_rootmerge::RootQaBid value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::RootQaBid_IsValid(value));
  _set_bit(1);
  bid_ = value;
}

// optional .pb.dqa_rootmerge.RootMergeResult result = 3;
inline bool RootMergeResponse::has_result() const {
  return _has_bit(2);
}
inline void RootMergeResponse::clear_result() {
  if (result_ != NULL) result_->::pb::dqa_rootmerge::RootMergeResult::Clear();
  _clear_bit(2);
}
inline const ::pb::dqa_rootmerge::RootMergeResult& RootMergeResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::pb::dqa_rootmerge::RootMergeResult* RootMergeResponse::mutable_result() {
  _set_bit(2);
  if (result_ == NULL) result_ = new ::pb::dqa_rootmerge::RootMergeResult;
  return result_;
}

// optional bytes query_analysis = 4;
inline bool RootMergeResponse::has_query_analysis() const {
  return _has_bit(3);
}
inline void RootMergeResponse::clear_query_analysis() {
  if (query_analysis_ != &_default_query_analysis_) {
    query_analysis_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RootMergeResponse::query_analysis() const {
  return *query_analysis_;
}
inline void RootMergeResponse::set_query_analysis(const ::std::string& value) {
  _set_bit(3);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  query_analysis_->assign(value);
}
inline void RootMergeResponse::set_query_analysis(const char* value) {
  _set_bit(3);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  query_analysis_->assign(value);
}
inline void RootMergeResponse::set_query_analysis(const void* value, size_t size) {
  _set_bit(3);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  query_analysis_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootMergeResponse::mutable_query_analysis() {
  _set_bit(3);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  return query_analysis_;
}

// optional uint32 seq_no = 5 [default = 0];
inline bool RootMergeResponse::has_seq_no() const {
  return _has_bit(4);
}
inline void RootMergeResponse::clear_seq_no() {
  seq_no_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 RootMergeResponse::seq_no() const {
  return seq_no_;
}
inline void RootMergeResponse::set_seq_no(::google::protobuf::uint32 value) {
  _set_bit(4);
  seq_no_ = value;
}

// optional bytes debug_info = 100;
inline bool RootMergeResponse::has_debug_info() const {
  return _has_bit(5);
}
inline void RootMergeResponse::clear_debug_info() {
  if (debug_info_ != &_default_debug_info_) {
    debug_info_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RootMergeResponse::debug_info() const {
  return *debug_info_;
}
inline void RootMergeResponse::set_debug_info(const ::std::string& value) {
  _set_bit(5);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void RootMergeResponse::set_debug_info(const char* value) {
  _set_bit(5);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void RootMergeResponse::set_debug_info(const void* value, size_t size) {
  _set_bit(5);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootMergeResponse::mutable_debug_info() {
  _set_bit(5);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  return debug_info_;
}

// -------------------------------------------------------------------

// RootServerRequest

// optional bytes search_id = 1;
inline bool RootServerRequest::has_search_id() const {
  return _has_bit(0);
}
inline void RootServerRequest::clear_search_id() {
  if (search_id_ != &_default_search_id_) {
    search_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RootServerRequest::search_id() const {
  return *search_id_;
}
inline void RootServerRequest::set_search_id(const ::std::string& value) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(value);
}
inline void RootServerRequest::set_search_id(const char* value) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(value);
}
inline void RootServerRequest::set_search_id(const void* value, size_t size) {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  search_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootServerRequest::mutable_search_id() {
  _set_bit(0);
  if (search_id_ == &_default_search_id_) {
    search_id_ = new ::std::string;
  }
  return search_id_;
}

// optional .pb.dqa_rootmerge.RootQaBid bid = 2;
inline bool RootServerRequest::has_bid() const {
  return _has_bit(1);
}
inline void RootServerRequest::clear_bid() {
  bid_ = 1000001;
  _clear_bit(1);
}
inline pb::dqa_rootmerge::RootQaBid RootServerRequest::bid() const {
  return static_cast< pb::dqa_rootmerge::RootQaBid >(bid_);
}
inline void RootServerRequest::set_bid(pb::dqa_rootmerge::RootQaBid value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::RootQaBid_IsValid(value));
  _set_bit(1);
  bid_ = value;
}

// required bytes question = 3;
inline bool RootServerRequest::has_question() const {
  return _has_bit(2);
}
inline void RootServerRequest::clear_question() {
  if (question_ != &_default_question_) {
    question_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RootServerRequest::question() const {
  return *question_;
}
inline void RootServerRequest::set_question(const ::std::string& value) {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void RootServerRequest::set_question(const char* value) {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void RootServerRequest::set_question(const void* value, size_t size) {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootServerRequest::mutable_question() {
  _set_bit(2);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  return question_;
}

// optional .pb.dqa_rootmerge.UserInfo user_info = 4;
inline bool RootServerRequest::has_user_info() const {
  return _has_bit(3);
}
inline void RootServerRequest::clear_user_info() {
  if (user_info_ != NULL) user_info_->::pb::dqa_rootmerge::UserInfo::Clear();
  _clear_bit(3);
}
inline const ::pb::dqa_rootmerge::UserInfo& RootServerRequest::user_info() const {
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::pb::dqa_rootmerge::UserInfo* RootServerRequest::mutable_user_info() {
  _set_bit(3);
  if (user_info_ == NULL) user_info_ = new ::pb::dqa_rootmerge::UserInfo;
  return user_info_;
}

// optional .pb.dqa_rootmerge.RootServerSearchInfo search_info = 5;
inline bool RootServerRequest::has_search_info() const {
  return _has_bit(4);
}
inline void RootServerRequest::clear_search_info() {
  if (search_info_ != NULL) search_info_->::pb::dqa_rootmerge::RootServerSearchInfo::Clear();
  _clear_bit(4);
}
inline const ::pb::dqa_rootmerge::RootServerSearchInfo& RootServerRequest::search_info() const {
  return search_info_ != NULL ? *search_info_ : *default_instance_->search_info_;
}
inline ::pb::dqa_rootmerge::RootServerSearchInfo* RootServerRequest::mutable_search_info() {
  _set_bit(4);
  if (search_info_ == NULL) search_info_ = new ::pb::dqa_rootmerge::RootServerSearchInfo;
  return search_info_;
}

// optional uint32 seq_no = 6 [default = 0];
inline bool RootServerRequest::has_seq_no() const {
  return _has_bit(5);
}
inline void RootServerRequest::clear_seq_no() {
  seq_no_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 RootServerRequest::seq_no() const {
  return seq_no_;
}
inline void RootServerRequest::set_seq_no(::google::protobuf::uint32 value) {
  _set_bit(5);
  seq_no_ = value;
}

// optional bytes query_analysis = 7;
inline bool RootServerRequest::has_query_analysis() const {
  return _has_bit(6);
}
inline void RootServerRequest::clear_query_analysis() {
  if (query_analysis_ != &_default_query_analysis_) {
    query_analysis_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& RootServerRequest::query_analysis() const {
  return *query_analysis_;
}
inline void RootServerRequest::set_query_analysis(const ::std::string& value) {
  _set_bit(6);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  query_analysis_->assign(value);
}
inline void RootServerRequest::set_query_analysis(const char* value) {
  _set_bit(6);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  query_analysis_->assign(value);
}
inline void RootServerRequest::set_query_analysis(const void* value, size_t size) {
  _set_bit(6);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  query_analysis_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootServerRequest::mutable_query_analysis() {
  _set_bit(6);
  if (query_analysis_ == &_default_query_analysis_) {
    query_analysis_ = new ::std::string;
  }
  return query_analysis_;
}

// -------------------------------------------------------------------

// RootServerResponse

// optional int32 ret_code = 1;
inline bool RootServerResponse::has_ret_code() const {
  return _has_bit(0);
}
inline void RootServerResponse::clear_ret_code() {
  ret_code_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RootServerResponse::ret_code() const {
  return ret_code_;
}
inline void RootServerResponse::set_ret_code(::google::protobuf::int32 value) {
  _set_bit(0);
  ret_code_ = value;
}

// optional .pb.dqa_rootmerge.RootQaBid bid = 2;
inline bool RootServerResponse::has_bid() const {
  return _has_bit(1);
}
inline void RootServerResponse::clear_bid() {
  bid_ = 1000001;
  _clear_bit(1);
}
inline pb::dqa_rootmerge::RootQaBid RootServerResponse::bid() const {
  return static_cast< pb::dqa_rootmerge::RootQaBid >(bid_);
}
inline void RootServerResponse::set_bid(pb::dqa_rootmerge::RootQaBid value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::RootQaBid_IsValid(value));
  _set_bit(1);
  bid_ = value;
}

// repeated .pb.dqa_rootmerge.AnswerItem result_list = 3;
inline int RootServerResponse::result_list_size() const {
  return result_list_.size();
}
inline void RootServerResponse::clear_result_list() {
  result_list_.Clear();
}
inline const ::pb::dqa_rootmerge::AnswerItem& RootServerResponse::result_list(int index) const {
  return result_list_.Get(index);
}
inline ::pb::dqa_rootmerge::AnswerItem* RootServerResponse::mutable_result_list(int index) {
  return result_list_.Mutable(index);
}
inline ::pb::dqa_rootmerge::AnswerItem* RootServerResponse::add_result_list() {
  return result_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerItem >&
RootServerResponse::result_list() const {
  return result_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerItem >*
RootServerResponse::mutable_result_list() {
  return &result_list_;
}

// optional uint32 seq_no = 4 [default = 0];
inline bool RootServerResponse::has_seq_no() const {
  return _has_bit(3);
}
inline void RootServerResponse::clear_seq_no() {
  seq_no_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 RootServerResponse::seq_no() const {
  return seq_no_;
}
inline void RootServerResponse::set_seq_no(::google::protobuf::uint32 value) {
  _set_bit(3);
  seq_no_ = value;
}

// optional bytes debug_info = 100;
inline bool RootServerResponse::has_debug_info() const {
  return _has_bit(4);
}
inline void RootServerResponse::clear_debug_info() {
  if (debug_info_ != &_default_debug_info_) {
    debug_info_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RootServerResponse::debug_info() const {
  return *debug_info_;
}
inline void RootServerResponse::set_debug_info(const ::std::string& value) {
  _set_bit(4);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void RootServerResponse::set_debug_info(const char* value) {
  _set_bit(4);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void RootServerResponse::set_debug_info(const void* value, size_t size) {
  _set_bit(4);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootServerResponse::mutable_debug_info() {
  _set_bit(4);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  return debug_info_;
}

// -------------------------------------------------------------------

// AnswerSourceMask

// optional uint32 question_idx = 1;
inline bool AnswerSourceMask::has_question_idx() const {
  return _has_bit(0);
}
inline void AnswerSourceMask::clear_question_idx() {
  question_idx_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AnswerSourceMask::question_idx() const {
  return question_idx_;
}
inline void AnswerSourceMask::set_question_idx(::google::protobuf::uint32 value) {
  _set_bit(0);
  question_idx_ = value;
}

// optional uint32 source_idx = 2;
inline bool AnswerSourceMask::has_source_idx() const {
  return _has_bit(1);
}
inline void AnswerSourceMask::clear_source_idx() {
  source_idx_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 AnswerSourceMask::source_idx() const {
  return source_idx_;
}
inline void AnswerSourceMask::set_source_idx(::google::protobuf::uint32 value) {
  _set_bit(1);
  source_idx_ = value;
}

// -------------------------------------------------------------------

// AnswerItem

// required .pb.dqa_rootmerge.DqaAnswerType ans_type = 1;
inline bool AnswerItem::has_ans_type() const {
  return _has_bit(0);
}
inline void AnswerItem::clear_ans_type() {
  ans_type_ = 0;
  _clear_bit(0);
}
inline pb::dqa_rootmerge::DqaAnswerType AnswerItem::ans_type() const {
  return static_cast< pb::dqa_rootmerge::DqaAnswerType >(ans_type_);
}
inline void AnswerItem::set_ans_type(pb::dqa_rootmerge::DqaAnswerType value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::DqaAnswerType_IsValid(value));
  _set_bit(0);
  ans_type_ = value;
}

// optional uint64 ans_id = 2;
inline bool AnswerItem::has_ans_id() const {
  return _has_bit(1);
}
inline void AnswerItem::clear_ans_id() {
  ans_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 AnswerItem::ans_id() const {
  return ans_id_;
}
inline void AnswerItem::set_ans_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  ans_id_ = value;
}

// required bytes ans_text = 3;
inline bool AnswerItem::has_ans_text() const {
  return _has_bit(2);
}
inline void AnswerItem::clear_ans_text() {
  if (ans_text_ != &_default_ans_text_) {
    ans_text_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& AnswerItem::ans_text() const {
  return *ans_text_;
}
inline void AnswerItem::set_ans_text(const ::std::string& value) {
  _set_bit(2);
  if (ans_text_ == &_default_ans_text_) {
    ans_text_ = new ::std::string;
  }
  ans_text_->assign(value);
}
inline void AnswerItem::set_ans_text(const char* value) {
  _set_bit(2);
  if (ans_text_ == &_default_ans_text_) {
    ans_text_ = new ::std::string;
  }
  ans_text_->assign(value);
}
inline void AnswerItem::set_ans_text(const void* value, size_t size) {
  _set_bit(2);
  if (ans_text_ == &_default_ans_text_) {
    ans_text_ = new ::std::string;
  }
  ans_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnswerItem::mutable_ans_text() {
  _set_bit(2);
  if (ans_text_ == &_default_ans_text_) {
    ans_text_ = new ::std::string;
  }
  return ans_text_;
}

// optional float ans_weight = 4;
inline bool AnswerItem::has_ans_weight() const {
  return _has_bit(3);
}
inline void AnswerItem::clear_ans_weight() {
  ans_weight_ = 0;
  _clear_bit(3);
}
inline float AnswerItem::ans_weight() const {
  return ans_weight_;
}
inline void AnswerItem::set_ans_weight(float value) {
  _set_bit(3);
  ans_weight_ = value;
}

// repeated .pb.dqa_rootmerge.AnswerSourceMask ans_source_mask = 5;
inline int AnswerItem::ans_source_mask_size() const {
  return ans_source_mask_.size();
}
inline void AnswerItem::clear_ans_source_mask() {
  ans_source_mask_.Clear();
}
inline const ::pb::dqa_rootmerge::AnswerSourceMask& AnswerItem::ans_source_mask(int index) const {
  return ans_source_mask_.Get(index);
}
inline ::pb::dqa_rootmerge::AnswerSourceMask* AnswerItem::mutable_ans_source_mask(int index) {
  return ans_source_mask_.Mutable(index);
}
inline ::pb::dqa_rootmerge::AnswerSourceMask* AnswerItem::add_ans_source_mask() {
  return ans_source_mask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerSourceMask >&
AnswerItem::ans_source_mask() const {
  return ans_source_mask_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::AnswerSourceMask >*
AnswerItem::mutable_ans_source_mask() {
  return &ans_source_mask_;
}

// optional bytes merge_info = 6;
inline bool AnswerItem::has_merge_info() const {
  return _has_bit(5);
}
inline void AnswerItem::clear_merge_info() {
  if (merge_info_ != &_default_merge_info_) {
    merge_info_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& AnswerItem::merge_info() const {
  return *merge_info_;
}
inline void AnswerItem::set_merge_info(const ::std::string& value) {
  _set_bit(5);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  merge_info_->assign(value);
}
inline void AnswerItem::set_merge_info(const char* value) {
  _set_bit(5);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  merge_info_->assign(value);
}
inline void AnswerItem::set_merge_info(const void* value, size_t size) {
  _set_bit(5);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  merge_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnswerItem::mutable_merge_info() {
  _set_bit(5);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  return merge_info_;
}

// optional bytes debug_info = 7;
inline bool AnswerItem::has_debug_info() const {
  return _has_bit(6);
}
inline void AnswerItem::clear_debug_info() {
  if (debug_info_ != &_default_debug_info_) {
    debug_info_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& AnswerItem::debug_info() const {
  return *debug_info_;
}
inline void AnswerItem::set_debug_info(const ::std::string& value) {
  _set_bit(6);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void AnswerItem::set_debug_info(const char* value) {
  _set_bit(6);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(value);
}
inline void AnswerItem::set_debug_info(const void* value, size_t size) {
  _set_bit(6);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  debug_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnswerItem::mutable_debug_info() {
  _set_bit(6);
  if (debug_info_ == &_default_debug_info_) {
    debug_info_ = new ::std::string;
  }
  return debug_info_;
}

// -------------------------------------------------------------------

// MergeAnswerItem

// optional .pb.dqa_rootmerge.AnswerItem ans_item = 1;
inline bool MergeAnswerItem::has_ans_item() const {
  return _has_bit(0);
}
inline void MergeAnswerItem::clear_ans_item() {
  if (ans_item_ != NULL) ans_item_->::pb::dqa_rootmerge::AnswerItem::Clear();
  _clear_bit(0);
}
inline const ::pb::dqa_rootmerge::AnswerItem& MergeAnswerItem::ans_item() const {
  return ans_item_ != NULL ? *ans_item_ : *default_instance_->ans_item_;
}
inline ::pb::dqa_rootmerge::AnswerItem* MergeAnswerItem::mutable_ans_item() {
  _set_bit(0);
  if (ans_item_ == NULL) ans_item_ = new ::pb::dqa_rootmerge::AnswerItem;
  return ans_item_;
}

// optional bytes merge_info = 2;
inline bool MergeAnswerItem::has_merge_info() const {
  return _has_bit(1);
}
inline void MergeAnswerItem::clear_merge_info() {
  if (merge_info_ != &_default_merge_info_) {
    merge_info_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MergeAnswerItem::merge_info() const {
  return *merge_info_;
}
inline void MergeAnswerItem::set_merge_info(const ::std::string& value) {
  _set_bit(1);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  merge_info_->assign(value);
}
inline void MergeAnswerItem::set_merge_info(const char* value) {
  _set_bit(1);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  merge_info_->assign(value);
}
inline void MergeAnswerItem::set_merge_info(const void* value, size_t size) {
  _set_bit(1);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  merge_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MergeAnswerItem::mutable_merge_info() {
  _set_bit(1);
  if (merge_info_ == &_default_merge_info_) {
    merge_info_ = new ::std::string;
  }
  return merge_info_;
}

// optional float ans_score = 3;
inline bool MergeAnswerItem::has_ans_score() const {
  return _has_bit(2);
}
inline void MergeAnswerItem::clear_ans_score() {
  ans_score_ = 0;
  _clear_bit(2);
}
inline float MergeAnswerItem::ans_score() const {
  return ans_score_;
}
inline void MergeAnswerItem::set_ans_score(float value) {
  _set_bit(2);
  ans_score_ = value;
}

// -------------------------------------------------------------------

// Cgi2RootMerge

// optional uint64 debug_flag = 1 [default = 0];
inline bool Cgi2RootMerge::has_debug_flag() const {
  return _has_bit(0);
}
inline void Cgi2RootMerge::clear_debug_flag() {
  debug_flag_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 Cgi2RootMerge::debug_flag() const {
  return debug_flag_;
}
inline void Cgi2RootMerge::set_debug_flag(::google::protobuf::uint64 value) {
  _set_bit(0);
  debug_flag_ = value;
}

// -------------------------------------------------------------------

// Busi2RootMerge

// -------------------------------------------------------------------

// Cgi2RootServer

// optional uint64 debug_flag = 1 [default = 0];
inline bool Cgi2RootServer::has_debug_flag() const {
  return _has_bit(0);
}
inline void Cgi2RootServer::clear_debug_flag() {
  debug_flag_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 Cgi2RootServer::debug_flag() const {
  return debug_flag_;
}
inline void Cgi2RootServer::set_debug_flag(::google::protobuf::uint64 value) {
  _set_bit(0);
  debug_flag_ = value;
}

// optional bool enable_cache = 2 [default = true];
inline bool Cgi2RootServer::has_enable_cache() const {
  return _has_bit(1);
}
inline void Cgi2RootServer::clear_enable_cache() {
  enable_cache_ = true;
  _clear_bit(1);
}
inline bool Cgi2RootServer::enable_cache() const {
  return enable_cache_;
}
inline void Cgi2RootServer::set_enable_cache(bool value) {
  _set_bit(1);
  enable_cache_ = value;
}

// -------------------------------------------------------------------

// Busi2RootServer

// -------------------------------------------------------------------

// RootServer2Cgi

// -------------------------------------------------------------------

// RootMerge2Cgi

// -------------------------------------------------------------------

// RootMergeSearchInfo

// optional .pb.dqa_rootmerge.Cgi2RootMerge cgi_2_rootmerge = 1;
inline bool RootMergeSearchInfo::has_cgi_2_rootmerge() const {
  return _has_bit(0);
}
inline void RootMergeSearchInfo::clear_cgi_2_rootmerge() {
  if (cgi_2_rootmerge_ != NULL) cgi_2_rootmerge_->::pb::dqa_rootmerge::Cgi2RootMerge::Clear();
  _clear_bit(0);
}
inline const ::pb::dqa_rootmerge::Cgi2RootMerge& RootMergeSearchInfo::cgi_2_rootmerge() const {
  return cgi_2_rootmerge_ != NULL ? *cgi_2_rootmerge_ : *default_instance_->cgi_2_rootmerge_;
}
inline ::pb::dqa_rootmerge::Cgi2RootMerge* RootMergeSearchInfo::mutable_cgi_2_rootmerge() {
  _set_bit(0);
  if (cgi_2_rootmerge_ == NULL) cgi_2_rootmerge_ = new ::pb::dqa_rootmerge::Cgi2RootMerge;
  return cgi_2_rootmerge_;
}

// optional .pb.dqa_rootmerge.Busi2RootMerge busi_2_rootmerge = 2;
inline bool RootMergeSearchInfo::has_busi_2_rootmerge() const {
  return _has_bit(1);
}
inline void RootMergeSearchInfo::clear_busi_2_rootmerge() {
  if (busi_2_rootmerge_ != NULL) busi_2_rootmerge_->::pb::dqa_rootmerge::Busi2RootMerge::Clear();
  _clear_bit(1);
}
inline const ::pb::dqa_rootmerge::Busi2RootMerge& RootMergeSearchInfo::busi_2_rootmerge() const {
  return busi_2_rootmerge_ != NULL ? *busi_2_rootmerge_ : *default_instance_->busi_2_rootmerge_;
}
inline ::pb::dqa_rootmerge::Busi2RootMerge* RootMergeSearchInfo::mutable_busi_2_rootmerge() {
  _set_bit(1);
  if (busi_2_rootmerge_ == NULL) busi_2_rootmerge_ = new ::pb::dqa_rootmerge::Busi2RootMerge;
  return busi_2_rootmerge_;
}

// -------------------------------------------------------------------

// RootServerSearchInfo

// optional .pb.dqa_rootmerge.Cgi2RootServer cgi_2_rootserver = 1;
inline bool RootServerSearchInfo::has_cgi_2_rootserver() const {
  return _has_bit(0);
}
inline void RootServerSearchInfo::clear_cgi_2_rootserver() {
  if (cgi_2_rootserver_ != NULL) cgi_2_rootserver_->::pb::dqa_rootmerge::Cgi2RootServer::Clear();
  _clear_bit(0);
}
inline const ::pb::dqa_rootmerge::Cgi2RootServer& RootServerSearchInfo::cgi_2_rootserver() const {
  return cgi_2_rootserver_ != NULL ? *cgi_2_rootserver_ : *default_instance_->cgi_2_rootserver_;
}
inline ::pb::dqa_rootmerge::Cgi2RootServer* RootServerSearchInfo::mutable_cgi_2_rootserver() {
  _set_bit(0);
  if (cgi_2_rootserver_ == NULL) cgi_2_rootserver_ = new ::pb::dqa_rootmerge::Cgi2RootServer;
  return cgi_2_rootserver_;
}

// optional .pb.dqa_rootmerge.Busi2RootServer busi_2_rootserver = 2;
inline bool RootServerSearchInfo::has_busi_2_rootserver() const {
  return _has_bit(1);
}
inline void RootServerSearchInfo::clear_busi_2_rootserver() {
  if (busi_2_rootserver_ != NULL) busi_2_rootserver_->::pb::dqa_rootmerge::Busi2RootServer::Clear();
  _clear_bit(1);
}
inline const ::pb::dqa_rootmerge::Busi2RootServer& RootServerSearchInfo::busi_2_rootserver() const {
  return busi_2_rootserver_ != NULL ? *busi_2_rootserver_ : *default_instance_->busi_2_rootserver_;
}
inline ::pb::dqa_rootmerge::Busi2RootServer* RootServerSearchInfo::mutable_busi_2_rootserver() {
  _set_bit(1);
  if (busi_2_rootserver_ == NULL) busi_2_rootserver_ = new ::pb::dqa_rootmerge::Busi2RootServer;
  return busi_2_rootserver_;
}

// -------------------------------------------------------------------

// SearchInfo

// optional .pb.dqa_rootmerge.RootMergeSearchInfo rootmerge_search_info = 1;
inline bool SearchInfo::has_rootmerge_search_info() const {
  return _has_bit(0);
}
inline void SearchInfo::clear_rootmerge_search_info() {
  if (rootmerge_search_info_ != NULL) rootmerge_search_info_->::pb::dqa_rootmerge::RootMergeSearchInfo::Clear();
  _clear_bit(0);
}
inline const ::pb::dqa_rootmerge::RootMergeSearchInfo& SearchInfo::rootmerge_search_info() const {
  return rootmerge_search_info_ != NULL ? *rootmerge_search_info_ : *default_instance_->rootmerge_search_info_;
}
inline ::pb::dqa_rootmerge::RootMergeSearchInfo* SearchInfo::mutable_rootmerge_search_info() {
  _set_bit(0);
  if (rootmerge_search_info_ == NULL) rootmerge_search_info_ = new ::pb::dqa_rootmerge::RootMergeSearchInfo;
  return rootmerge_search_info_;
}

// optional .pb.dqa_rootmerge.RootServerSearchInfo rootserver_search_info = 2;
inline bool SearchInfo::has_rootserver_search_info() const {
  return _has_bit(1);
}
inline void SearchInfo::clear_rootserver_search_info() {
  if (rootserver_search_info_ != NULL) rootserver_search_info_->::pb::dqa_rootmerge::RootServerSearchInfo::Clear();
  _clear_bit(1);
}
inline const ::pb::dqa_rootmerge::RootServerSearchInfo& SearchInfo::rootserver_search_info() const {
  return rootserver_search_info_ != NULL ? *rootserver_search_info_ : *default_instance_->rootserver_search_info_;
}
inline ::pb::dqa_rootmerge::RootServerSearchInfo* SearchInfo::mutable_rootserver_search_info() {
  _set_bit(1);
  if (rootserver_search_info_ == NULL) rootserver_search_info_ = new ::pb::dqa_rootmerge::RootServerSearchInfo;
  return rootserver_search_info_;
}

// -------------------------------------------------------------------

// UserInfo

// optional uint64 uid = 1;
inline bool UserInfo::has_uid() const {
  return _has_bit(0);
}
inline void UserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 UserInfo::uid() const {
  return uid_;
}
inline void UserInfo::set_uid(::google::protobuf::uint64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional float longtitude = 2 [default = 0];
inline bool UserInfo::has_longtitude() const {
  return _has_bit(1);
}
inline void UserInfo::clear_longtitude() {
  longtitude_ = 0;
  _clear_bit(1);
}
inline float UserInfo::longtitude() const {
  return longtitude_;
}
inline void UserInfo::set_longtitude(float value) {
  _set_bit(1);
  longtitude_ = value;
}

// optional float latitude = 3 [default = 0];
inline bool UserInfo::has_latitude() const {
  return _has_bit(2);
}
inline void UserInfo::clear_latitude() {
  latitude_ = 0;
  _clear_bit(2);
}
inline float UserInfo::latitude() const {
  return latitude_;
}
inline void UserInfo::set_latitude(float value) {
  _set_bit(2);
  latitude_ = value;
}

// optional bytes city = 4;
inline bool UserInfo::has_city() const {
  return _has_bit(3);
}
inline void UserInfo::clear_city() {
  if (city_ != &_default_city_) {
    city_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& UserInfo::city() const {
  return *city_;
}
inline void UserInfo::set_city(const ::std::string& value) {
  _set_bit(3);
  if (city_ == &_default_city_) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void UserInfo::set_city(const char* value) {
  _set_bit(3);
  if (city_ == &_default_city_) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void UserInfo::set_city(const void* value, size_t size) {
  _set_bit(3);
  if (city_ == &_default_city_) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_city() {
  _set_bit(3);
  if (city_ == &_default_city_) {
    city_ = new ::std::string;
  }
  return city_;
}

// optional uint32 ip = 5;
inline bool UserInfo::has_ip() const {
  return _has_bit(4);
}
inline void UserInfo::clear_ip() {
  ip_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 UserInfo::ip() const {
  return ip_;
}
inline void UserInfo::set_ip(::google::protobuf::uint32 value) {
  _set_bit(4);
  ip_ = value;
}

// -------------------------------------------------------------------

// RootMergeQuestionInfo

// optional bytes question = 1;
inline bool RootMergeQuestionInfo::has_question() const {
  return _has_bit(0);
}
inline void RootMergeQuestionInfo::clear_question() {
  if (question_ != &_default_question_) {
    question_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RootMergeQuestionInfo::question() const {
  return *question_;
}
inline void RootMergeQuestionInfo::set_question(const ::std::string& value) {
  _set_bit(0);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void RootMergeQuestionInfo::set_question(const char* value) {
  _set_bit(0);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void RootMergeQuestionInfo::set_question(const void* value, size_t size) {
  _set_bit(0);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RootMergeQuestionInfo::mutable_question() {
  _set_bit(0);
  if (question_ == &_default_question_) {
    question_ = new ::std::string;
  }
  return question_;
}

// -------------------------------------------------------------------

// RootServerAnsInfo4App

// required .pb.dqa_rootmerge.DqaAnswerType app_type = 1;
inline bool RootServerAnsInfo4App::has_app_type() const {
  return _has_bit(0);
}
inline void RootServerAnsInfo4App::clear_app_type() {
  app_type_ = 0;
  _clear_bit(0);
}
inline pb::dqa_rootmerge::DqaAnswerType RootServerAnsInfo4App::app_type() const {
  return static_cast< pb::dqa_rootmerge::DqaAnswerType >(app_type_);
}
inline void RootServerAnsInfo4App::set_app_type(pb::dqa_rootmerge::DqaAnswerType value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::DqaAnswerType_IsValid(value));
  _set_bit(0);
  app_type_ = value;
}

// repeated .pb.dqa_rootmerge.MergeAnswerItem ans_list = 2;
inline int RootServerAnsInfo4App::ans_list_size() const {
  return ans_list_.size();
}
inline void RootServerAnsInfo4App::clear_ans_list() {
  ans_list_.Clear();
}
inline const ::pb::dqa_rootmerge::MergeAnswerItem& RootServerAnsInfo4App::ans_list(int index) const {
  return ans_list_.Get(index);
}
inline ::pb::dqa_rootmerge::MergeAnswerItem* RootServerAnsInfo4App::mutable_ans_list(int index) {
  return ans_list_.Mutable(index);
}
inline ::pb::dqa_rootmerge::MergeAnswerItem* RootServerAnsInfo4App::add_ans_list() {
  return ans_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::MergeAnswerItem >&
RootServerAnsInfo4App::ans_list() const {
  return ans_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::MergeAnswerItem >*
RootServerAnsInfo4App::mutable_ans_list() {
  return &ans_list_;
}

// optional uint32 ans_num = 3;
inline bool RootServerAnsInfo4App::has_ans_num() const {
  return _has_bit(2);
}
inline void RootServerAnsInfo4App::clear_ans_num() {
  ans_num_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 RootServerAnsInfo4App::ans_num() const {
  return ans_num_;
}
inline void RootServerAnsInfo4App::set_ans_num(::google::protobuf::uint32 value) {
  _set_bit(2);
  ans_num_ = value;
}

// optional .pb.dqa_rootmerge.RootServer2Cgi rootserver_2_cgi = 4;
inline bool RootServerAnsInfo4App::has_rootserver_2_cgi() const {
  return _has_bit(3);
}
inline void RootServerAnsInfo4App::clear_rootserver_2_cgi() {
  if (rootserver_2_cgi_ != NULL) rootserver_2_cgi_->::pb::dqa_rootmerge::RootServer2Cgi::Clear();
  _clear_bit(3);
}
inline const ::pb::dqa_rootmerge::RootServer2Cgi& RootServerAnsInfo4App::rootserver_2_cgi() const {
  return rootserver_2_cgi_ != NULL ? *rootserver_2_cgi_ : *default_instance_->rootserver_2_cgi_;
}
inline ::pb::dqa_rootmerge::RootServer2Cgi* RootServerAnsInfo4App::mutable_rootserver_2_cgi() {
  _set_bit(3);
  if (rootserver_2_cgi_ == NULL) rootserver_2_cgi_ = new ::pb::dqa_rootmerge::RootServer2Cgi;
  return rootserver_2_cgi_;
}

// -------------------------------------------------------------------

// RootServerAnsInfo4Query

// repeated .pb.dqa_rootmerge.RootServerAnsInfo4App app_ans_list = 1;
inline int RootServerAnsInfo4Query::app_ans_list_size() const {
  return app_ans_list_.size();
}
inline void RootServerAnsInfo4Query::clear_app_ans_list() {
  app_ans_list_.Clear();
}
inline const ::pb::dqa_rootmerge::RootServerAnsInfo4App& RootServerAnsInfo4Query::app_ans_list(int index) const {
  return app_ans_list_.Get(index);
}
inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* RootServerAnsInfo4Query::mutable_app_ans_list(int index) {
  return app_ans_list_.Mutable(index);
}
inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* RootServerAnsInfo4Query::add_app_ans_list() {
  return app_ans_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >&
RootServerAnsInfo4Query::app_ans_list() const {
  return app_ans_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >*
RootServerAnsInfo4Query::mutable_app_ans_list() {
  return &app_ans_list_;
}

// -------------------------------------------------------------------

// RootMergeResult

// repeated .pb.dqa_rootmerge.RootServerAnsInfo4App ans_list = 1;
inline int RootMergeResult::ans_list_size() const {
  return ans_list_.size();
}
inline void RootMergeResult::clear_ans_list() {
  ans_list_.Clear();
}
inline const ::pb::dqa_rootmerge::RootServerAnsInfo4App& RootMergeResult::ans_list(int index) const {
  return ans_list_.Get(index);
}
inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* RootMergeResult::mutable_ans_list(int index) {
  return ans_list_.Mutable(index);
}
inline ::pb::dqa_rootmerge::RootServerAnsInfo4App* RootMergeResult::add_ans_list() {
  return ans_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >&
RootMergeResult::ans_list() const {
  return ans_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::dqa_rootmerge::RootServerAnsInfo4App >*
RootMergeResult::mutable_ans_list() {
  return &ans_list_;
}

// optional .pb.dqa_rootmerge.RootMerge2Cgi rootmerge_2_cgi = 2;
inline bool RootMergeResult::has_rootmerge_2_cgi() const {
  return _has_bit(1);
}
inline void RootMergeResult::clear_rootmerge_2_cgi() {
  if (rootmerge_2_cgi_ != NULL) rootmerge_2_cgi_->::pb::dqa_rootmerge::RootMerge2Cgi::Clear();
  _clear_bit(1);
}
inline const ::pb::dqa_rootmerge::RootMerge2Cgi& RootMergeResult::rootmerge_2_cgi() const {
  return rootmerge_2_cgi_ != NULL ? *rootmerge_2_cgi_ : *default_instance_->rootmerge_2_cgi_;
}
inline ::pb::dqa_rootmerge::RootMerge2Cgi* RootMergeResult::mutable_rootmerge_2_cgi() {
  _set_bit(1);
  if (rootmerge_2_cgi_ == NULL) rootmerge_2_cgi_ = new ::pb::dqa_rootmerge::RootMerge2Cgi;
  return rootmerge_2_cgi_;
}

// optional .pb.dqa_rootmerge.DqaAnswerType top1_app_type = 3;
inline bool RootMergeResult::has_top1_app_type() const {
  return _has_bit(2);
}
inline void RootMergeResult::clear_top1_app_type() {
  top1_app_type_ = 0;
  _clear_bit(2);
}
inline pb::dqa_rootmerge::DqaAnswerType RootMergeResult::top1_app_type() const {
  return static_cast< pb::dqa_rootmerge::DqaAnswerType >(top1_app_type_);
}
inline void RootMergeResult::set_top1_app_type(pb::dqa_rootmerge::DqaAnswerType value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::DqaAnswerType_IsValid(value));
  _set_bit(2);
  top1_app_type_ = value;
}

// repeated .pb.dqa_rootmerge.DqaAnswerType app_type_list = 4;
inline int RootMergeResult::app_type_list_size() const {
  return app_type_list_.size();
}
inline void RootMergeResult::clear_app_type_list() {
  app_type_list_.Clear();
}
inline pb::dqa_rootmerge::DqaAnswerType RootMergeResult::app_type_list(int index) const {
  return static_cast< pb::dqa_rootmerge::DqaAnswerType >(app_type_list_.Get(index));
}
inline void RootMergeResult::set_app_type_list(int index, pb::dqa_rootmerge::DqaAnswerType value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::DqaAnswerType_IsValid(value));
  app_type_list_.Set(index, value);
}
inline void RootMergeResult::add_app_type_list(pb::dqa_rootmerge::DqaAnswerType value) {
  GOOGLE_DCHECK(pb::dqa_rootmerge::DqaAnswerType_IsValid(value));
  app_type_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
RootMergeResult::app_type_list() const {
  return app_type_list_;
}
inline ::google::protobuf::RepeatedField<int>*
RootMergeResult::mutable_app_type_list() {
  return &app_type_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dqa_rootmerge
}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< pb::dqa_rootmerge::RootQaBid>() {
  return pb::dqa_rootmerge::RootQaBid_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< pb::dqa_rootmerge::DqaAnswerType>() {
  return pb::dqa_rootmerge::DqaAnswerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spider_2fpoem_2fdqa_5frootmerge_2eproto__INCLUDED
